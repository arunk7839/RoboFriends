{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","id","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchfield","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.166fd5ce.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({name,id,email}) =>{\r\n   // const {name,id,email} = props;\r\n    return(\r\n<div className='tc bg-light-green dib br2 pa3 ma2 grow bw2 shadow-5 '>\r\n    <img  alt='robots' src={`https://robohash.org/${id}?size=250x250`}/>\r\n    <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n</div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n\r\n    return(\r\n<div>\r\n{robots.map((user,i)=>{\r\n    \r\nreturn < Card \r\nkey={i} \r\nid={robots[i].id} \r\nname={robots[i].name} \r\nemail={robots[i].email}/>\r\n})}\r\n</div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input \r\n        aria-label='Search Robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}/>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll= (props)=>{\r\n   \r\n\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n    \r\n\r\n\r\n}\r\nexport default Scroll;\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n    this.setState({hasError:true})\r\n    }\r\n\r\nrender(){\r\nif (this.state.hasError)\r\nreturn <h1>oops! This is not good</h1>\r\nelse\r\nreturn this.props.children\r\n}\r\n\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport {connect} from 'react-redux';\r\nimport {setSearchField,requestRobots} from '../actions';\r\n\r\nconst mapStateToProps =(state)=>{\r\n    return {\r\n        searchfield: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\nreturn {\r\n    onSearchChange:(event)=> dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots:()=> dispatch(requestRobots())   \r\n    \r\n}\r\n\r\n}\r\nclass App extends Component{\r\n   \r\n\r\n    componentDidMount(){\r\n  \r\nthis.props.onRequestRobots();\r\n    }\r\n\r\n    \r\n    render(){\r\n   \r\n        const {searchfield,onSearchChange,robots,isPending} = this.props;\r\n\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())})\r\n        \r\n        return isPending ?\r\n        <h1>Loading</h1> :\r\n            (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundry>\r\n            <CardList robots ={filteredRobots}/>\r\n            </ErrorBoundry>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField =(text)=>{\r\n   return {\r\n       type: CHANGE_SEARCH_FIELD,\r\n       payload: text\r\n   }\r\n}\r\n\r\nexport const requestRobots =()=>{\r\n    return (dispatch)=>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch={\r\n    searchfield:'',\r\n    \r\n} \r\nconst initialStateRobots={\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n    \r\n} \r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n          //return {...state,{searchfield:action.payload}}\r\n        return Object.assign({},state,{searchfield:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n        return Object.assign({},state,{isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign({},state,{robots:action.payload,isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n        return Object.assign({},state,{error:action.payload,isPending:false})\r\n        default:\r\n        return state;\r\n\r\n    }\r\n}","\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n             // if (config.onUpdate) {\n                //config.onUpdate(registration);\n             // }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              //if (config.onSuccess) {\n               // config.onSuccess(registration);\n             // }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport App from './containers/App';\nimport {searchRobots,requestRobots} from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport  serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\nReactDOM.render(\n\n<Provider store={store}>\n<App />\n</Provider>\n \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker();\n"],"sourceRoot":""}